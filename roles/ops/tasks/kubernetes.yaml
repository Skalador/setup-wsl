---
- name: Get the latest Kubernetes release information
  uri:
    url: "https://dl.k8s.io/release/stable.txt"
    method: GET
    return_content: true
  register: latest_release_info

- name: Display latest Kubernetes version
  set_fact:
    latest_kubernetes_version: "v{{ latest_release_info.content | regex_replace('v(\\d+\\.\\d+)\\..*', '\\1') }}"
  when: latest_release_info.status == 200

# - name: Display latest Kubernetes version
#   ansible.builtin.debug:
#     msg: "{{ latest_kubernetes_version }}"

- name: Check if /etc/apt/trusted.gpg.d/kubernetes-apt-keyring.asc exists
  stat:
    path: /etc/apt/trusted.gpg.d/kubernetes-apt-keyring.asc
  register: kubernetes_apt_keyring

- name: Add an apt signing key for Kubernetes
  become: true
  ansible.builtin.get_url:
    url: "https://pkgs.k8s.io/core:/stable:/{{ latest_kubernetes_version }}/deb/Release.key"
    dest: /etc/apt/trusted.gpg.d/kubernetes-apt-keyring.asc
    mode: '0644'
    force: true
  when:
    - "latest_kubernetes_version is defined"
    - "not kubernetes_apt_keyring.stat.exists"

- name: Add apt repository for Kubernetes
  become: true
  apt_repository:
    repo: "deb [signed-by=/etc/apt/trusted.gpg.d/kubernetes-apt-keyring.asc] https://pkgs.k8s.io/core:/stable:/{{ latest_kubernetes_version }}/deb/ /"
    state: present
    filename: kubernetes
  when:
    - "latest_kubernetes_version is defined"
    - "not kubernetes_apt_keyring.stat.exists"

- name: Install kubeadm and kubectl
  become: true
  apt:
    name: "{{ packages }}"
    state: present
    update_cache: true
  when:
    - "latest_kubernetes_version is defined"
  vars:
    packages:
      - kubelet
      - kubeadm
      - kubectl

- name: Add kubectl autocompletion for bash
  ansible.builtin.lineinfile:
    path: ~/.bashrc
    line: 'source <(kubectl completion bash)'
#  state: present
#  create: yes

- name: Check if ~/.zshrc exists
  stat:
    path: ~/.zshrc
  register: zshrc_file

- name: Add kubectl autocompletion for zsh
  ansible.builtin.lineinfile:
    path: ~/.zshrc
    line: 'source <(kubectl completion zsh)'
  when: zshrc_file.stat.exists
#  state: present
#  create: yes
